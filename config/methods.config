includeConfig "../external/nextflow-config/config/schema/schema.config"

methods {
    set_pipeline_log = {
        trace.enabled = true
        trace.file = "${params.pipeline_log_dir}/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.pipeline_log_dir}/timeline.html"

        report.enabled = true
        report.file = "${params.pipeline_log_dir}/report.html"
    }

    set_output_dir = {
        tz = TimeZone.getTimeZone("UTC")
        timestamp = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        software = "moPepGen-${params.mopepgen_version}"
        root_output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}"

        output_dir = "${root_output_dir}/${software}"
        params.final_output_dir = "${output_dir}/output"
        params.intermediate_file_dir = "${output_dir}/intermediate"

        log_dir = "${root_output_dir}/log-${manifest.name}-${manifest.version}-${timestamp}"
        params.process_log_dir = "${log_dir}/process-log/${software}"
        params.pipeline_log_dir = "${log_dir}/nextflow-log"
    }

    check_max = { obj, type ->
        if (type == 'memory') {
            try {
                if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                    return params.max_memory as nextflow.util.MemoryUnit
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
            }
        } else if (type == 'time') {
            try {
                if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                    return params.max_time as nextflow.util.Duration
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
            }
        } else if (type == 'cpus') {
            try {
                return Math.min(obj, params.max_cpus as int)
            } catch (all) {
                println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
            }
        }
    }

    set_resources_allocation = {
        // Function to ensure that resource requirements don't go beyond
        // a maximum limit
        node_cpus = params.max_cpus
        node_memory_GB = params.max_memory.toGiga()
        // Load base.config by default for all pipelines
        includeConfig "${projectDir}/config/base.config"
        if (params.ucla_cds) {
            if (node_cpus == 64) {
                // Check memory for M64 node
                if (node_cpus == 64 && node_memory_GB >= 950 && node_memory_GB <= 1010) {
                    throw new Exception("   ### ERROR ###   M64 partition is not supported.")
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            } else {
                // Check memory for F series node
                if (node_memory_GB >= (node_cpus * 2 * 0.9 - 1) && node_memory_GB <= (node_cpus * 2)) {
                    includeConfig "${projectDir}/config/F${node_cpus}.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            }
        }
    }

    validate = {
        if (params.entrypoint == 'fasta') {
            if (!(params.containsKey('variant_peptide'))) {
                throw new Exception("Required option `variant_peptide` not set.")
            }
        }

        params.database_processing_modes = params.database_processing_modes as Set
        if (params.database_processing_modes.size() < 1) {
            throw new Exception('`database_processing_modes` must be set.')
        }

        if (params.enable_filter_fasta == true) {
            if (! params.containsKey('filterFasta')) {
                throw new Exception('The params.filterFasta namespace is not set.')
            }
            if ('split' in params.database_processing_modes || 'plain' in params.database_processing_modes) {
                if (! params.filterFasta.containsKey('variant_peptide')) {
                    throw new Exception('The params.filterFasta.variant_peptide namespace is not set.')
                }
                if (! (params.filterFasta['variant_peptide'] in Map)) {
                    throw new Exception('params.filterFasta.variant_peptide must be a namespace.')
                }
            }
            if ('split' in params.database_processing_modes) {
                if (params.novel_orf_peptide != params._DEFAULT_NOVEL_ORF_PEPTIDES) {
                    if (! params.filterFasta.containsKey('novel_orf_peptide')) {
                        throw new Exception('The params.filterFasta.novel_orf_peptide namespace is not set.')
                    }
                    if (! (params.filterFasta['novel_orf_peptide'] in Map)) {
                        throw new Exception('params.filterFasta.novel_orf_peptide must be a namespace.')
                    }
                }
                if (params.alt_translation_peptide != params._DEFAULT_ALT_TRANSLATION_PEPTIDES) {
                    if (! params.filterFasta.containsKey('alt_translation_peptide')) {
                        throw new Exception('The params.filterFasta.alt_translation_peptide namespace is not set.')
                    }
                    if (! (params.filterFasta['alt_translation_peptide'] in Map)) {
                        throw new Exception('params.filterFasta.alt_translation_peptide must be a namespace.')
                    }
                }
            }
            if ('merge' in params.database_processing_modes) {
                if (! params.filterFasta.containsKey('merged_peptides')) {
                    throw new Exception('The params.filterFasta.merged_peptides namespace is not set.')
                }
                if (! (params.filterFasta['merged_peptides'] in Map)) {
                    throw new Exception('params.filterFasta.merged_peptides must be a namespace.')
                }
            }
        }

        // skip encode decoy unfiltered fasta for fasta entrypoint unless it's specified.
        if (params.process_unfiltered_fasta == null) {
            params.process_unfiltered_fasta = params.entrypoint != 'fasta' || params.enable_filter_fasta == false
        }
    }

    setup = {
        schema.validate()
        methods.validate()
        methods.set_output_dir()
        methods.set_pipeline_log()
        methods.set_resources_allocation()
    }
}
