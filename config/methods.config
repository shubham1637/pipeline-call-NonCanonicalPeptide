includeConfig "../external/nextflow-config/config/schema/schema.config"
includeConfig "../external/nextflow-config/config/methods/common_methods.config"

methods {
    set_pipeline_log = {
        trace.enabled = true
        trace.file = "${params.pipeline_log_dir}/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.pipeline_log_dir}/timeline.html"

        report.enabled = true
        report.file = "${params.pipeline_log_dir}/report.html"
    }

    set_output_dir = {
        tz = TimeZone.getTimeZone("UTC")
        timestamp = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        software = "moPepGen-${params.mopepgen_version}"
        root_output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}"

        output_dir = "${root_output_dir}/${software}"
        params.final_output_dir = "${output_dir}/output"
        params.intermediate_file_dir = "${output_dir}/intermediate"

        log_dir = "${root_output_dir}/log-${manifest.name}-${manifest.version}-${timestamp}"
        params.process_log_dir = "${log_dir}/process-log/${software}"
        params.pipeline_log_dir = "${log_dir}/nextflow-log"
    }

    validate = {
        if (params.entrypoint == 'fasta') {
            if (!(params.containsKey('variant_peptide'))) {
                throw new Exception("Required option `variant_peptide` not set.")
            }
        }

        params.database_processing_modes = params.database_processing_modes as Set
        if (params.database_processing_modes.size() < 1) {
            throw new Exception('`database_processing_modes` must be set.')
        }

        if (params.enable_filter_fasta == true) {
            if (! params.containsKey('filterFasta')) {
                throw new Exception('The params.filterFasta namespace is not set.')
            }
            if ('split' in params.database_processing_modes || 'plain' in params.database_processing_modes) {
                if (! params.filterFasta.containsKey('variant_peptide')) {
                    throw new Exception('The params.filterFasta.variant_peptide namespace is not set.')
                }
                if (! (params.filterFasta['variant_peptide'] in Map)) {
                    throw new Exception('params.filterFasta.variant_peptide must be a namespace.')
                }
            }
            if ('split' in params.database_processing_modes) {
                if (params.novel_orf_peptide != params._DEFAULT_NOVEL_ORF_PEPTIDES) {
                    if (! params.filterFasta.containsKey('novel_orf_peptide')) {
                        throw new Exception('The params.filterFasta.novel_orf_peptide namespace is not set.')
                    }
                    if (! (params.filterFasta['novel_orf_peptide'] in Map)) {
                        throw new Exception('params.filterFasta.novel_orf_peptide must be a namespace.')
                    }
                }
                if (params.alt_translation_peptide != params._DEFAULT_ALT_TRANSLATION_PEPTIDES) {
                    if (! params.filterFasta.containsKey('alt_translation_peptide')) {
                        throw new Exception('The params.filterFasta.alt_translation_peptide namespace is not set.')
                    }
                    if (! (params.filterFasta['alt_translation_peptide'] in Map)) {
                        throw new Exception('params.filterFasta.alt_translation_peptide must be a namespace.')
                    }
                }
            }
            if ('merge' in params.database_processing_modes) {
                if (! params.filterFasta.containsKey('merged_peptides')) {
                    throw new Exception('The params.filterFasta.merged_peptides namespace is not set.')
                }
                if (! (params.filterFasta['merged_peptides'] in Map)) {
                    throw new Exception('params.filterFasta.merged_peptides must be a namespace.')
                }
            }
        }

        // skip encode decoy unfiltered fasta for fasta entrypoint unless it's specified.
        if (params.process_unfiltered_fasta == null) {
            params.process_unfiltered_fasta = params.entrypoint != 'fasta' || params.enable_filter_fasta == false
        }
    }

    setup = {
        schema.validate()
        methods.validate()
        methods.set_output_dir()
        methods.set_pipeline_log()
        if (params.ucla_cds) {
            methods.set_resources_allocation()
        }
    }
}
